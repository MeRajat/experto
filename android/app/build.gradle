def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '0'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 28

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "tech.maddybcorp.experto2"
        minSdkVersion 21
        targetSdkVersion 28
        multiDexEnabled true
        versionCode 4
        versionName '1.4'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//        ndk {
//            abiFilters 'armeabi-v7a'
//        }
    }
   splits {
       // Configures multiple APKs based on ABI.
       abi {
           // Enables building multiple APKs per ABI.
           enable true

           // By default all ABIs are included, so use reset() and include to specify that we only
           // want APKs for x86, armeabi-v7a, and mips.
           reset()

           // Specifies a list of ABIs that Gradle should create APKs for.
           include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"

           // Specifies that we want to also generate a universal APK that includes all ABIs.
           universalApk true
       }
   }
    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
        debug{
            applicationIdSuffix ".debug"
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    implementation 'com.google.firebase:firebase-core:16.0.9'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}
